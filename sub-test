const getArgs = () => {
  return Object.fromEntries(
    $argument
      .split("&")
      .map(item => item.split("="))
      .map(([k, v]) => [k, decodeURIComponent(v)])
  );
}

const getUserInfo = (url, method = "head") => {
  const request = { headers: { "User-Agent": "Quantumult%20X" }, url };
  return new Promise((resolve, reject) => {
    $httpClient[method](request, (err, resp) => {
      if (err) reject(err);
      else if (resp.status !== 200) reject(resp.status);
      else {
        const header = Object.keys(resp.headers).find(key => key.toLowerCase() === "subscription-userinfo");
        header ? resolve(resp.headers[header]) : reject("链接响应头不带有流量信息");
      }
    })
  });
}

const getDataInfo = async (url) => {
  try {
    const data = await getUserInfo(url);
    return Object.fromEntries(
      data
        .match(/\w+=[\d.eE+-]+/g)
        .map(item => item.split("="))
        .map(([k, v]) => [k, Number(v)])
    );
  } catch(err) {
    console.error(err);
  }
}

const getRemainingDays = (resetDay) => {
  if (!resetDay) return null;

  const now = new Date();
  const today = now.getDate();
  const month = now.getMonth();
  const year = now.getFullYear();
  const daysInMonth = resetDay > today ? 0 : new Date(year, month + 1, 0).getDate();

  return daysInMonth - today + resetDay;
}

const bytesToSize = (bytes) => {
  if (bytes === 0) return "0B";
  const sizes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
}

const formatTime = (time) => {
  const dateObj = new Date(time);
  const year = dateObj.getFullYear();
  const month = dateObj.getMonth() + 1;
  const day = dateObj.getDate();
  return `${year}年${month}月${day}日`;
}

(async () => {
  const args = getArgs();
  const info = await getDataInfo(args.url);
  if (!info) return;

  const resetDayLeft = getRemainingDays(parseInt(args["reset_day"]));
  const used = info.download + info.upload;
  const total = info.total;
  const expire = args.expire || info.expire;
  let content = [`用量：${bytesToSize(used)} of ${bytesToSize(total)}`];

  if (resetDayLeft) {
    content.push(`重置：剩余${resetDayLeft}天`);
  }
  if (expire && expire !== "false") {
    if (/^[\d.]+$/.test(expire)) expire *= 1000;
    content.push(`到期：${formatTime(expire)}`);
  }

  const now = new Date();
const hour = now.getHours();
const minutes = now.getMinutes();
const currentTime = ${hour > 9 ? hour : '0' + hour}:${minutes > 9 ? minutes : '0' + minutes};

return {
title: ${args.title} | ${currentTime},
content: content.join(”\n”),
};
})();
